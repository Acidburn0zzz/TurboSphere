import os
import sys

defaultenv	= Environment(ENV = os.environ)

linuxenv        = defaultenv.Clone(tools = ['default', 'textfile'], CCFLAGS = " -Werror=return-type -Wno-unused-local-typedefs -Wall -Wno-pointer-arith -mtune=native -msse2 -flto -O2 -funroll-loops -std=c++11 -Wcast-align -g -pg", LINKFLAGS = "-I./")

windowsenv 	= defaultenv.Clone(CCFLAGS = "/O2 /EHsc")

win32env	= windowsenv.Clone()
win64env	= windowsenv.Clone()

linux32env	= linuxenv.Clone()
linux64env	= linuxenv.Clone()

macintoshenv	= defaultenv.Clone()

print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
print '!!  I apologize for the build system being held together with bailing wire and duct tape.                                !!'
print '!!  As root, run `scons libinstall --build_libs=y`. Then as a normal use run `scons  --build_plugins=all buildplugins`.  !!'
print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'

AddOption('--install_libs',
                  dest='install_libs',
                  type='string',
                  nargs=1,
                  action='store',
                  help='y|n : Determines whether or not to try and install the core TurboSphere libraries')
AddOption('--build_plugins',
                  dest='build_plugins',
                  type='string',
                  nargs=1,
                  action='store',
                  help='y/all|n : Determines whether or not to build the plugins for TurboSphere.')
AddOption('--usemingw',
                  dest='usemingw',
                  type='string',
                  nargs=1,
                  action='store',
                  help='y|n : Use the MingW toolchain.')

AddOption('--dontusestat',
                  dest='dontusestat',
                  type='string',
                  nargs=1,
                  action='store',
                  help='y|n : Sets T5 and the scriptfs plugin to use access rather than stat on Unix systems. Has no effect on Windows builds. Default=n.')

AddOption('--useamdlibm',
                  dest='useamdlibm',
                  type='string',
                  nargs=1,
                  action='store',
                  help='y|n : Use the AMD libm for speed critical sections when the AMD LibM is available. AMD LibM shared library should be placed in the same directory as the TurboSphere binary. If the AMD libm is not available then the normal libm is still used instead. Has no effect on Windows builds. Default=y')

AddOption('--build_v8',
                  dest='buildv8opt',
                  type='string',
                  nargs=1,
                  action='store',
                  help='y|n : Download and build v8. This must be done manually if not done through scons (see the install file for your platform in the docs directory).')

#set up the environment depending on platform. Mainly for installing libraries.
v8name = ''
bassname = ''
arch = 'ia32'
if sys.platform == 'win32' or sys.platform == 'win64':
	v8name = 'v8.dll'
	lib_install_dir = './bin/Release'
	currentenv = win32env.Clone(LIBPATH=lib_install_dir)

	graphicalg_name    = './bin/Release/graphicalg'
	graphiccommon_name = './bin/Release/graphiccommon'
	configmanager_name = './bin/Release/configmanager'

else:
	v8name = 'libv8.so'
	graphicalg_name    = 'graphicalg'
	graphiccommon_name = 'graphiccommon'
	configmanager_name = 'configmanager'

	if sys.platform == 'linux':
		lib_install_dir = '/usr/lib/turbosphere'
		currentenv = linux32env.Clone(LIBPATH=lib_install_dir)
	else:
		v8name = 'libv8.so'
		lib_install_dir = '/usr/lib64/turbosphere'
		currentenv = linux64env.Clone(LIBPATH=lib_install_dir)
		arch = 'x64'

usemingw = GetOption('usemingw')
if usemingw == "y":
	currentenv.Replace(CC = 'i686-w64-mingw32-gcc')
	#currentenv.Tool('i686-w64-mingw32-gcc')

setuplibs = "False"


#build and install v8
#def v8_install():
#	installv8 = currentenv.Command(lib_install_dir+'/'+v8name, 'v8/out/'+arch+'.release/lib.target/'+v8name, Copy("$TARGET", "$SOURCE"))

#def v8_build():
#	downloadv8 = currentenv.Command('v8/DEPS', [], '-svn checkout http://v8.googlecode.com/svn/trunk v8')
#	buildv8 = currentenv.Command('v8/out/'+arch+'.release/lib.target/'+v8name, downloadv8, "cd v8 && pwd && make dependencies && make "+arch+".release library=shared -j2")
#	addincludes = currentenv.Command([], downloadv8,  "-cp -f v8/include/* ./")
#	AlwaysBuild(addincludes)
#	v8_install()
#	ldconfig = currentenv.Command([], [], "ldconfig")
#	AlwaysBuild(ldconfig)


lib_path = lib_install_dir
pluginpath = 'bin/Release/plugin'

graphiccommon_files = Split("""
	graphiccommon/screen.cpp
	graphiccommon/color.cpp""")

graphiccommon_path = ['graphiccommon']

graphicalg_files = Split("""./graphicalg/structures.cpp""")

graphicalg_path = ['./graphicalg']

configmanager_files = Split("""
	./configmanager/opengame.cpp
	./configmanager/openscript.cpp""")

configmanager_path = ['./configmanager']

turbosphere_files = Split("""
	./engine.cpp
	./loadplugins.cpp
	./functionload.cpp
	./variableregister.cpp""")

useAmdLibm = GetOption('useamdlibm')
if not ( (useAmdLibm == "n") or (useAmdLibm == "N") ):
	currentenv.Append(CCFLAGS=" -DUSE_AMDLIBM ")

setuplibs = GetOption('install_libs')

t5env = currentenv.Clone()
networkenv = currentenv.Clone()

has_unistd = 0
has_stat = 0
unistd_n = 0
stat_n = 0
unistd_sys = 0
stat_sys = 0


conf = Configure(t5env)
#find the available headers for building T5 and networkTS.
if sys.platform == 'linux' or sys.platform == 'linux2':
	if conf.CheckCHeader('unistd.h'):
		has_unistd = 1
		unistd_n = 1
	elif conf.CheckHeader('sys/unistd.h'):
		has_unistd = 1
		unistd_sys = 1
	if conf.CheckHeader('stat.h'):
		has_stat = 1
		stat_n = 1
	elif conf.CheckHeader('sys/stat.h'):
		has_stat = 1
		stat_sys = 1


if stat_n:
	conf.env.Append(CCFLAGS=" -DHAS_STAT -DUSE_STAT ")
if stat_sys:
	conf.env.Append(CCFLAGS=" -DHAS_STAT_SYS -DUSE_STAT ")
if has_unistd == 1:
	conf.env.Append(CCFLAGS=" -DUSE_UNISTD ")

if unistd_sys == 1:
	conf.env.Append(CCFLAGS=" -DHAS_UNISTD_SYS ")
elif unistd_n == 1:
	conf.env.Append(CCFLAGS=" -DHAS_UNISTD ")

t5env = conf.Finish()

nconf = Configure(networkenv)

if unistd_sys == 1:
	nconf.env.Append(CCFLAGS=" -DHAS_UNISTD_SYS ")
elif unistd_n == 1:
	nconf.env.Append(CCFLAGS=" -DHAS_UNISTD ")

networkenv = nconf.Finish()

has_mmap = 0;

scriptfsenv = currentenv.Clone()
sconf = Configure(scriptfsenv)
#find the available headers for building T5 and networkTS.
if sconf.CheckCHeader('sys/mman.h') and 0:
	has_mmap = 1
	sconf.env.Append(CCFLAGS=" -DHAS_MMAP ")
else:
	has_mmap = 0
	sconf.env.Append(CCFLAGS=" -DUSE_SDLRWOPS ")

scriptfsenv = sconf.Finish()
scriptfsenv.Append(LINKFLAGS=" -L./ ")

dontUseStat = GetOption('dontusestat')
if(dontUseStat != "y"):
	t5env.Append(CCFLAGS=" -DPREFER_STAT ")

t5 = t5env.SharedLibrary('t5', ['t5.cpp'])

graphicalg = currentenv.SharedLibrary('graphicalg', graphicalg_files, CPPPATH = graphicalg_path)

graphiccommon = currentenv.SharedLibrary('graphiccommon', graphiccommon_files, CPPPATH = graphiccommon_path)

configmanager = currentenv.SharedLibrary('configmanager', configmanager_files, CPPPATH = configmanager_path, LIBS = ['t5', 'graphiccommon', 'v8'], LIBPATH = lib_path)

if sys.platform == 'darwin':
	programenv = currentenv.Clone()
	programenv.Append(FRAMEWORKS=['Cocoa', 'OpenGL'])
	turbosphere = programenv.Program(target = './bin/Release/turbosphere', source = turbosphere_files,
		LIBS=['v8', 'SDL2', t5, graphicalg, graphiccommon, configmanager, 'pthread', 'dl', 'libSDLmain' ],
		LIBPATH = lib_path)
elif sys.platform =='win32' or sys.platform == 'win64':
	turbosphere = currentenv.Program(target = './bin/Release/turbosphere', source = turbosphere_files,
		LIBS=['v8', 'SDL2', 't5', 'graphicalg', 'graphiccommon', 'configmanager'],
		LIBPATH = lib_path)
	networkTS_files	 = ['plugins/networkTS/win_network.cpp']

else:
	turbosphere = currentenv.Program(target = './bin/Release/turbosphere', source = turbosphere_files,
		LIBS=['v8', 'SDL2', t5, graphicalg, graphiccommon, configmanager, 'pthread', 'dl' ],
		LIBPATH = lib_path)
	networkTS_files	 = ['plugins/networkTS/unix_network.cpp']

#add the platform independant networkTS files.

networkTS_files.append(['plugins/networkTS/frontend.cpp','plugins/networkTS/networkTS_main.cpp'])


if sys.platform == 'win32' or sys.platform == 'win64':
	plugin_libs = ['t5', 'configmanager', 'graphicalg', 'graphiccommon', 'SDL', 'v8', 'OpenGL32']
else:
	plugin_libs = [t5, configmanager, graphicalg, graphiccommon, 'SDL2', 'GL', 'v8']
	pluginsrc_path = 'plugins'

base_libs = [t5, configmanager, graphicalg, graphiccommon]
graphicSDL_files = ['graphic.cpp']
bmpfontSDL_files = ['bmpfont.cpp']
ttffontSDL_files = ['ttffont.cpp']
inputSDL_files = ['main.cpp,', 'mouse.cpp', 'key.cpp']
scriptfs_files = ['plugins/scriptfs/scriptfs.cpp', 'plugins/scriptfs/bytearray.cpp', 'plugins/scriptfs/rawfile.cpp', 'plugins/scriptfs/bytearray_frontend.cpp', 'plugins/scriptfs/rawfile_frontend.cpp']
getkeystring_files = ['getkeystring.cpp']
SDL_GL_path 	 = ['plugins/graphicSDL_GL_threaded']
SDL_GL_files	 = ['plugins/graphicSDL_GL_threaded/sdl_gl_main.cpp', 'plugins/graphicSDL_GL_threaded/save.cpp', 'plugins/graphicSDL_GL_threaded/image.cpp', 'plugins/graphicSDL_GL_threaded/surface.cpp', 'plugins/graphicSDL_GL_threaded/surface_thread.cpp', 'plugins/graphicSDL_GL_threaded/color.cpp', 'plugins/graphicSDL_GL_threaded/primitives.cpp', 'plugins/graphicSDL_GL_threaded/screen.cpp']

SDLGLenv = currentenv.Clone()
sconf = Configure(SDLGLenv)
sconf.env.Append()
SDLGLenv = sconf.Finish()

mapengineGL_files= ['plugins/mapengineGL/map.cpp', 'plugins/mapengineGL/mapengine.cpp', 'plugins/mapengineGL/tileset.cpp', 'plugins/mapengineGL/spriteset.cpp', 'plugins/mapengineGL/person.cpp']
audioBASS_files	 = ['plugins/audioBASS/frontend.cpp', 'plugins/audioBASS/bass_backend.cpp', 'plugins/audioBASS/script.cpp']
audioBASS_libs	 = ['bass', 'bassmidi']

spritebatcher_files = ['plugins/spritebatcherGL/frontend.cpp', 'plugins/spritebatcherGL/batcher.cpp']

build_plugins = GetOption('build_plugins')
if build_plugins != "n":
	if build_plugins == "y" or build_plugins == "all":
		#v8_build()
		if sys.platform == 'darwin':
			SDL_GL = 		SDLGLenv.SharedLibrary('./bin/Release/plugin/SDL_GL', SDL_GL_files , LIBS = [plugin_libs, 'SDL2_image', 'png', 'libSDLmain', 'GL'], LIBPATH = lib_path)
			spritebatcherGL = 	SDLGLenv.SharedLibrary('./bin/Release/plugin/spritebatcherGL', spritebatcher_files , LIBS = [plugin_libs, 'GL'], LIBPATH = lib_path)
		elif sys.platform == 'win32' or sys.platform == 'win64':
			SDL_GL = 		SDLGLenv.SharedLibrary('./bin/Release/plugin/SDL_GL', SDL_GL_files , LIBS = [plugin_libs, 'SDL2_image', 'png', 'GL'], LIBPATH = lib_path)
			spritebatcherGL = 	SDLGLenv.SharedLibrary('./bin/Release/plugin/spritebatcherGL', spritebatcher_files , LIBS = [plugin_libs, 'GL'], LIBPATH = lib_path)
		else:
			SDL_GL = 		SDLGLenv.SharedLibrary('./bin/Release/plugin/SDL_GL_threaded', SDL_GL_files , LIBS = [plugin_libs, 'SDL2_image', 'GL', 'png', 'GLU', 'X11'], LIBPATH = ['/usr/local/lib', lib_path])
			spritebatcherGL = 	SDLGLenv.SharedLibrary('./bin/Release/plugin/spritebatcherGL', spritebatcher_files , LIBS = [plugin_libs, 'GL', 'X11'], LIBPATH = ['/usr/local/lib', lib_path])
		
		Depends(SDL_GL, base_libs)
		
		bmpfontGL     = currentenv.SharedLibrary('./bin/Release/plugin/bmpfontGL', ['plugins/bmpfontGL/bmpfont.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)
		Depends(bmpfontGL, base_libs)
		ttffontGL     = currentenv.SharedLibrary('./bin/Release/plugin/ttffontGL', ['plugins/ttffontGL/ttffont.cpp'], LIBS = [plugin_libs, 'SDL2_ttf'], LIBPATH = lib_path)
		Depends(ttffontGL, base_libs)
		inputSDL      = currentenv.SharedLibrary('./bin/Release/plugin/inputSDL', ['plugins/inputSDL/input_main.cpp', 'plugins/inputSDL/joystick.cpp', 'plugins/inputSDL/mouse.cpp', 'plugins/inputSDL/key.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)
		Depends(inputSDL, base_libs)
		scriptfs      = scriptfsenv.SharedLibrary('./bin/Release/plugin/scriptfs', scriptfs_files, LIBS = [plugin_libs, "md5"], LIBPATH = lib_path)
		Depends(scriptfs, base_libs)
		getkeystring  = currentenv.SharedLibrary('./bin/Release/plugin/getkeystring', ['plugins/getkeystring/getkeystring.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)
		Depends(getkeystring, base_libs)
		windowstyleGL = currentenv.SharedLibrary('./bin/Release/plugin/windowstyleGL', ['plugins/windowstyleGL/windowstyle.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)
		Depends(windowstyleGL, base_libs)
		mapengineGL   = currentenv.SharedLibrary('./bin/Release/plugin/mapengineGL', mapengineGL_files, LIBS = plugin_libs, LIBPATH = lib_path)
		Depends(mapengineGL, base_libs)
		audioBASS     = currentenv.SharedLibrary('./bin/Release/plugin/audioBASS', audioBASS_files, LIBS = ['t5', 'configmanager', 'v8', audioBASS_libs], LIBPATH = lib_path)
		Depends(audioBASS, base_libs)
		networkTS     = networkenv.SharedLibrary('./bin/Release/plugin/networkTS', networkTS_files, LIBS = ['t5', 'configmanager', 'v8'], LIBPATH = lib_path)
		Depends(networkTS, base_libs)

if setuplibs == "y":
	print "Setting up libraries."
	installed_libraries = currentenv.Install(lib_install_dir, [graphicalg, graphiccommon, configmanager, t5])
	AlwaysBuild(installed_libraries)
	if sys.platform != 'win32':
		print "Writing conf file."
		currentenv.Textfile(target = '/etc/ld.so.conf.d/turbosphere.conf', source = [lib_install_dir])


#conf = Configure(currentenv)
#hasgraphicalg = conf.CheckLib('graphicalg')
#hasgraphiccommon = conf.CheckLib('graphiccommon')
#hasconfigmanager = conf.CheckLib('configmanager')
#hasT5 = conf.CheckLib('t5')
#currentenv = conf.Finish()

Depends(turbosphere, graphicalg)
Depends(turbosphere, graphiccommon)
Depends(turbosphere, t5)
Depends(graphicalg, graphiccommon)
Depends(graphicalg, t5)
Depends(configmanager, t5)

#if not setuplibs:
#	if not (hasgraphicalg):
#		print "The library graphicalg is not installed, but can be built and installed. Please rerun Scons with options `libinstall --install_libs=y`."
#	if not (hasgraphiccommon):
#		print "The library graphiccommon is not installed, but can be built and installed. Please rerun Scons with options `libinstall --install_libs=y`."
#	if not (hasconfigmanager):
#		print "The library configmanager is not installed, but can be built and installed. Please rerun Scons with options `libinstall --install_libs=y`."
#	if not (hasT5):
#		print "The library t5 is not installed, but can be built and installed. Please rerun Scons with options `libinstall --install_libs=y`."

#if not(hasT5 and hasgraphiccommon and hasgraphicalg and hasconfigmanager):
#	exit(1)

Depends(turbosphere, configmanager)

currentenv.Alias('libinstall', lib_install_dir)
currentenv.Alias('confwrite', '/etc/ld.so.conf.d')
currentenv.Alias('buildplugins', 'bin/Release')
