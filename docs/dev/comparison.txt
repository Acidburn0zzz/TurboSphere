

***Images vs. Surfaces***

Images and Surfaces in TurboSphere aren't quite the same as they were in Sphere. While they shared most methods in Sphere, there were some methods that were exclusive, notably surface.getPixel and surface.setPixel, and image.rotate. In TurboSphere (at the moment, anyway), Images and Surfaces can be passed interchangeably. All Image and Surface members are shared, and they share an internal data structure. But they are not the same in TurboSphere, and for similar reasons as in Sphere. 
	Surfaces are held in software (i.e., their pixel data is held in system RAM), and Images are held in hardware (using GPU RAM). The most immediate effect is that it is slow to blit an image onto a surface or vice versa, while blitting an image onto an image or a surface onto a surface is much faster. The main difference, though, is that images blit to the screen (which can be considered a hardware surface itself) much faster than a surface. So why ever use a surface? Surfaces are much faster when you are modifying the pixels in them, especially for setPixel (getPixel is almost identical in speed between the two).
	Use Surfaces when you want to change their pixels or draw primitives on them, and use images when you are blitting them often. Mainly, be aware that communication from one to the other is slow.

***TTF Fonts vs. BMP Fonts***

Sphere had a font format. It was very simple, but got the job done quite nicely. This was one area of the engine no one ever felt was lacking (except for some dislike of the included system font). But it wasn't a font system like your word processors use, it was Bitmapped (every character was an image embedded in the font file), and not vectorized. TrueType fonts (TTF) use a very complex system of vectors, hinting, kerning, and a lot of other things I only vaguely understand, to define the characters as shapes in general instead of as a collection pixels. This means that they can be drawn at any size and have nice curves and sharp corners.
	But TTF Fonts are inherently slower than bitmapped fonts. Even if the font is loaded into a series of images of a given size (and assumed to be redrawn for another size when it's needed), because kerning and alignment is a concern there is still more overhead. In a game setting, TTF fonts can be very convenient for their clear and (relatively) fast scaling, most of the time in a game you just draw text at one size. So why have TTF Fonts? One, the scaling. Two is that TurboSphere uses freetype, which is very nice TTF library that draws the fonts very nicely at any size. That means you can draw any font you get as a TTF (and almost all fonts you can download are TTF), and it will look pretty nice at any size. Finally, TTF fonts aren't horrendously slow, just not as fast as bitmapped fonts.
	So then why use BMP fonts? One, they are faster. But more importantly, they are gauranteed to look perfect at at least one resolution.
	There are reasons to use both (often in the same game). Be aware of which one is better suited to your situation.

***BMP vs. PNG vs. JPG vs. TGA***

OK, so I threw TGA in there just because it's my favorite. But TurboSphere does support it. But why are there multiple types, especially in TurboSphere where you could just convert them all to one format and use that?
I often see games that have all graphics assets held as BMPs. That's not great. A BMP is nice because it is a very simple type of file. It is just a long list of all the pixels' colors. That does mean it is fast and easy to load, but if your game is slow because of image loading you have more important worries. BMPs are not good because they are so simple. They have a size equal to approximately width*height*4 bytes.
	So what should you use? I recommend PNG images. PNGs are a lot like BMPs in that they are lossless (each pixel is definitely the exact same color that it was saved as--I'll get to this later). They actually serve the same purpose as BMPs, that is very precise graphics, but they are much smaller than BMPs due to some compression (I don't remember what kind). Be kind to the players, have them download a smaller file and get an equally impressive game.
	I once saw a game that used JPGs for its images. And then I threw up a little bit in my mouth, pushed it back down, and then looked back at the screen and I just couldn't help vomiting all over everything. Then I had to buy a new computer because of vomit-damamge. That's what I think of JPGs in games. Yes they are small, but they look like crap. And it is true that you can turn up the quality when saving them in higher end image editors, but when you do they can actually be bigger than PNGs. There's just no place for them in games.
	I put TGA in here because it's what I use. You don't see TGAs a lot anymore (they used to be pretty common on Macs, but that was at least a decade ago), but they do still serve a good purpose. TGAs are a lot like PNGs, but there is one major difference. I *do* remember what kind of compression these use. It's called RLE, for Run Length Encapsulation. Some people say the E is for encryption. There's no *crypt here, so I find that a rather odd thing to say. Some people say RLC, or Run Length Compression. That makes a lot more sense, but I don't like pronouncing that acronym as much. RLE is very, very good at compressing data that has a lot of adjacently repeated values. Although the exact form TGA uses is fairly complicated, the basic idea is this: in the case of a bitmap, if it was red on the top half and black on the bottom half, in BMP form (as a stream from the file) it would be a long list of the color red repeated over and over again, and then a long list of black repeated over and over again. But if it had RLE, it would just the color red and then a number representing how many pixels in a row are red, and the color black and a number representing how many pixels in a row are black. That bitmap may be a really extreme example, but the idea holds. For images that only have a few colors, or have large areas of repeated colors, TGAs are very small, and can often be smaller than PNGs (though definitely not always, or even normally). So when would you want to use TGAs? I've used them when I want a lot of images that are much larger than what they actually represent and are mostly transparent, which can be useful for when you want to have a lot of images blitted at offsets compared to each other, but want the coordinates blitted to to relate to some other value. Specifically, I made a bunch of rooms where every piece of furniture's image had the dimensions of the room, with the actual furniture shape in the place it would be in the room. I just blitted every image at the same point as the rooms background. I'm sure you could think of a more interesting (and more useful) example. Games that TurboSphere is good at making will likely have many occasions where a TGA might be nice choice.
	TGAs are getting uncommon now, though. I'll be that unless you have either the Sphere WxWidgets editor or a professional graphics program, the only program on your computer that can read a TGA is your web browser (browsers have to read all the junk people left on the internet over the years, so they actually have pretty good file compatibility). You'll find a lot of programs don't support them.
	Also note, if you are still using the Sphere WxWidgets editor (the one that comes with Sphere) for TurboSphere, its TGA implementation is broken--sort of. It's a TGA data header with (sort of) the data of a BMP following it. But few folks use TGA anymore, so no one ever noticed (or maybe just didn't care) back when Sphere's editor was being worked on (they stopped working on the editor before the engine). However! Some implementations of the TGA standard will accept this as a valid TGA. Perhaps it's something like RLE where you just say the color and then that it will be that color for one pixel, every time no matter how many pixels after that are that color. I don't know. But both the Sphere 1 engine and SDL_Image accepts Sphere's editor's TGAs as valid TGAs, so it works out I guess. Just be aware those TGAs aren't the kind of quality you should expect from a TGA.