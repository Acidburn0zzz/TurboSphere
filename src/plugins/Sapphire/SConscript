Import('currentenv librarydir corelibtargets binarydir LibraryInstall IsDarwin IsLinux IsWindows')

import os
import glob

Sapphire_files	 = glob.glob("*.cpp") + glob.glob("Galileo/*.cpp")

UseCpp11ThreadsAndAtomics = ARGUMENTS.get('cpp11_thread', 0)
UseSDL2ThreadsAndAtomics = ARGUMENTS.get('sdl2_thread', 0)
Uselibpng = ARGUMENTS.get('use_png', 1)
Uselibjpg = ARGUMENTS.get('use_jpg', 1)
Uselibjpeg = ARGUMENTS.get('use_jpeg', 1)
Uselibtiff = ARGUMENTS.get('use_tiff', 0)

Uselibtiff = 0

if int(Uselibpng):
  currentenv.Append(CPPDEFINES = ["USE_PNG"])
if int(Uselibjpg) or int(Uselibtiff):
  currentenv.Append(CPPDEFINES = ["USE_TIFF"])
if int(Uselibjpg) or int(Uselibjpeg):
  currentenv.Append(CPPDEFINES = ["USE_JPEG"])
  currentenv.Append(LIBPATH = ["/usr/local/opt/jpeg-turbo/lib"])

elibs = []

eframeworks = []

if IsLinux():
  currentenv.Append(CPPDEFINES = ["USE_PTHREAD"])

if int(UseCpp11ThreadsAndAtomics):
  Sapphire_files += [os.path.join("Thread", "Thread_cpp11.cpp"), os.path.join("Thread", "Atomic_cpp11.cpp")]
elif int(UseSDL2ThreadsAndAtomics):
  Sapphire_files += [os.path.join("Thread", "Thread_sdl2.c"), os.path.join("Thread", "Atomic_sdl2.c")]
elif IsDarwin():
  Sapphire_files += [os.path.join("Thread", "Thread_nsthread.m"), os.path.join("Thread", "Atomic_darwin.c")]
  elibs = ["objc"]
  eframeworks = ["Foundation"]
if 'USE_INTEL_TBB' in currentenv['CPPDEFINES']:
  elibs+= ['tbb']

if int(Uselibjpg) or int(Uselibjpeg):
    elibs+=['jpeg']

Sapphire     = currentenv.SharedLibrary("Sapphire", Sapphire_files,
  LIBS = ['t5', 'graphiccommon', 'graphicalg', 'configmanager', 'v8'] + elibs,
  FRAMEWORKS = ['SDL2', 'SDL2_image', 'OpenGL'] + eframeworks,
  CCFLAGS = " -g " )

Depends(Sapphire, corelibtargets)
LibraryInstall(os.path.join(binarydir, 'plugin'), Sapphire, currentenv)
